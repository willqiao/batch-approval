{"version":3,"sources":["logo.svg","Cell.js","App.js","TaskForm.js","serviceWorker.js","pages/UserDetailPage.js","reducer/reducer.js","pages/UsersPage.js","index.js"],"names":["module","exports","__webpack_require__","p","Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","cellClass","_this2","console","log","react_default","a","createElement","onClick","event","setState","className","Component","ProgressBar","stlye","position","left","top","displayProgress","connect","previousState","dispatch","on_click","type","data","ClockView","secondStyle","border","height","width","transform","seconds","transformOrigin","assign","style","borderRadius","App","test","rotateSecond","intervalHandle","unmount","handler","setInterval","Date","getSeconds","fetch","then","res","json","formattedCreatedTime","catch","e","window","clearInterval","_this3","App_ClockView","toISOString","title","Cell_ProgressBar","Boolean","location","hostname","match","UserDetailPage","onGetTask","params","id","currentTask","taskName","taskId","taskCreated","objectSpread","t","task","initialState","currentTaskId","alltasks","UsersPage","tasks","loadTasks","map","key","Link","to","MenuLink","_ref","label","iconname","badge","Route","path","children","_ref2","store","createStore","arguments","length","undefined","action","newState","JSON","parse","stringify","ReactDOM","render","es","BrowserRouter","basename","href","paddingLeft","src_MenuLink","component","src_App_0","exact","src_Cell","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9886ce05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { cellClass: \"squareStyle\" };\n  }\n\n  render() {\n    console.log(this.props, \"Cell\");\n    return (\n      <div\n        onClick={event => {\n          this.state.cellClass === \"squareStyle\"\n            ? this.setState({ cellClass: \"circleStyle\" })\n            : this.setState({ cellClass: \"squareStyle\" });\n        }}\n        className=\"cellStyle\">\n        <div className={this.state.cellClass} />\n      </div>\n    );\n  }\n}\n\nexport const ProgressBar = (props) => {\n  return (\n    <div stlye={{ 'position': \"absolute\", 'left': \"50%\", 'top': \"35%\"}}\n      className={\"preloader-wrapper big \" + props.displayProgress }\n      > \n      <div className=\"spinner-layer spinner-blue-only\">\n        <div className=\"circle-clipper left\">\n          <div className=\"circle\" />\n        </div>\n        <div className=\"gap-patch\">\n          <div className=\"circle\" />\n        </div>\n        <div className=\"circle-clipper right\">\n          <div className=\"circle\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (previousState) => {\n  return {}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return { \n          on_click: ()=> dispatch({type:'good', data:'mydata' })\n        }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Cell);\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { ProgressBar } from './Cell';\nimport ReactDOM from \"react-dom\";\n\nconst ClockView = (props) => {\n  let clockstyle = {\n    position: 'relative',\n    border: '1px solid',\n    height: '500px',\n    width: '500px',\n    borderRadius: '50%'\n  }\n\n  let secondStyle = {\n    position: 'relative',\n    top: '250px',\n    left: '250px',\n    border: '1px solid',\n    height: '1px',\n    width: '45%',\n    transform: 'rotate(' + props.seconds + ')',\n    transformOrigin: '0 0'\n  }\n\n  return <div style={clockstyle} {...props}>\n    <div style={secondStyle}></div>\n  </div>\n}\n\nclass App extends Component {\n\n  state = {\n    test: \"good job\",\n    rotateSecond: '0deg',\n    displayProgress: 'inactive',\n    intervalHandle: null,\n    \n  };\n\n  unmount = false;\n\n  constructor(props) {\n    super(props);\n\n    \n\n  }\n\n  componentDidMount() {\n    this.unmount = false;\n    let handler = setInterval(() => {\n      this.setState({ rotateSecond: (-90 + (new Date().getSeconds() * 6)) + 'deg' });\n    }, 1000);\n\n    this.setState({intervalHandle:handler});\n    this.setState({displayProgress:'active'});\n    fetch('https://localhost:8443/batch-approval/tasks').then((res)=>res.json()).then(\n      (data)=>  {\n        if (this.unmount === false) {\n          this.setState({test:data[0].formattedCreatedTime})\n          this.setState({displayProgress:'inactive'});\n          console.log(this.state, 'test2');\n        }\n      }).catch((e)=>console.log(e));\n    \n  }\n\n  componentWillUnmount() {\n    this.unmount = true;\n    window.clearInterval(this.state.intervalHandle);\n  }\n\n  render() {\n\n    return <div {...this.props} className=\"App\" >\n      \n\n      <ClockView seconds={this.state.rotateSecond} onClick={(event)=> {\n        this.setState({displayProgress:'active'});\n        fetch('https://localhost:8443/batch-approval/tasks').then((res)=>res.json()).then(\n          (data)=>  {\n            this.setState({test:data[0].formattedCreatedTime})\n            this.setState({displayProgress:'inactive'});\n            console.log(this.state, 'test2');\n          }).catch((e)=>console.log(e));\n        }} />\n\n      <div>{this.state.rotateSecond} this s i\"s my n'fame fff   : {new Date().toISOString()} {this.props.title}</div>\n      <ProgressBar displayProgress={this.state.displayProgress}/>  \n    </div>;\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nclass TaskForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskname: \"\",\n      taskTypes: { backend: false, batch: false, approval: false }\n    };\n    this.handleRadio = this.handleRadio.bind(this);\n  }\n\n  handleRadio(event) {\n    let temp = { backend: false, batch: false, approval: false };\n    temp[event.target.value] = event.target.checked;\n    console.log(temp);\n    this.setState({ taskTypes: temp });\n  }\n\n  render() {\n    console.log(this.state);\n    return (\n      <form>\n        <div className=\"row\">\n          <div className=\"input-field col s6\">\n            <input\n              type=\"text\"\n              name=\"taskname\"\n              value={this.state.taskname}\n              onChange={e => {\n                this.setState({ taskname: e.target.value.toUpperCase() });\n              }}\n            />\n            <label htmlFor=\"taskname\">Task Name</label>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col s6\">\n            <p>\n              <label>\n                <input\n                  name=\"radioGroup\"\n                  type=\"radio\"\n                  value=\"backend\"\n                  checked={this.state.taskTypes[\"backend\"]}\n                  onChange={this.handleRadio}\n                />\n                <span>Backend</span>\n              </label>\n            </p>\n\n            <p>\n              <label>\n                <input\n                  name=\"radioGroup\"\n                  type=\"radio\"\n                  value=\"batch\"\n                  checked={this.state.taskTypes[\"batch\"]}\n                  onChange={this.handleRadio}\n                />\n                <span>Batch</span>\n              </label>\n            </p>\n\n            <p>\n              <label>\n                <input\n                  name=\"radioGroup\"\n                  type=\"radio\"\n                  value=\"approval\"\n                  checked={this.state.taskTypes[\"approval\"]}\n                  onChange={this.handleRadio}\n                />\n                <span>Approval</span>\n              </label>\n            </p>\n          </div>\n        </div>\n\n        <br />\n\n        {/* <input\n          type=\"checkbox\"\n          name=\"checkGroup\"\n          value=\"Backend\"\n          checked={this.state.taskTypes[\"backend\"]}\n        />\n        <input\n          type=\"checkbox\"\n          name=\"checkGroup\"\n          value=\"Batch\"\n          checked={this.state.taskTypes[\"batch\"]}\n        />\n        <input\n          type=\"checkbox\"\n          name=\"checkGroup\"\n          value=\"Approval\"\n          checked={this.state.taskTypes[\"approval\"]}\n        /> */}\n      </form>\n    );\n  }\n}\n\nexport default TaskForm;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n\nclass UserDetailPage extends Component {\n\n    componentDidMount(){\n        this.props.onGetTask(this.props.match.params.id);\n    }\n\n    render() { \n        console.log(\"hereagain\", this.props);\n        return ( <div><br/> {this.props.match.params.id} \n        <a className=\"waves-effect waves-light btn-small\" onClick={()=>this.props.onGetTask(this.props.match.params.id)}>Get</a>\n        <div>\n            {this.props.currentTask.taskName} <br/>\n            {this.props.currentTask.taskId} <br/>\n            {this.props.currentTask.taskCreated} <br/>\n        </div>\n            </div> );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const newstate = {...state};\n    return newstate;\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onGetTask: (id)=> {\n            fetch('https://localhost:8443/batch-approval/task/'+ id).then((res)=> res.json()).then(t=>{\n                dispatch({type:'GET_TASK', task:{taskName:t.taskName, taskId: t.taskId, taskCreated:t.formattedCreatedTime}});\n            }).catch((e)=>console.log(e));\n            \n        }\n    }\n}\n \nexport default connect(mapStateToProps, mapDispatchToProps) (UserDetailPage);","const initialState = {\n    currentTaskId:0,\n    currentTask:{},\n    alltasks:[]\n}\n\nexport default function taskReducer(state =  initialState, action){\n    const newState = JSON.parse(JSON.stringify(state));\n\n    if (action.type === 'GET_TASK') {\n        newState.currentTask = action.task;\n    }\n\n    if (action.type === 'LOAD_TASKS') {\n        newState.alltasks =  action.alltasks; \n    }\n    return newState;\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from \"react-router-dom\";\n\nclass UsersPage extends Component {\n    componentDidMount() {\n        fetch('https://localhost:8443/batch-approval/tasks').then((res)=>res.json()).then(\n            (tasks)=>  {\n                this.props.loadTasks(tasks);\n            }).catch((e)=>console.log(e));\n\n    }\n\n    render() { \n        console.log('userspage', this.props);\n        return ( <div>\n            <ul className='collection'>\n                {this.props.alltasks.map((t)=>{\n                    return <li className='collection-item' key={'userlist'+t.taskId}> <Link to={'/users/'+ t.taskId}>{t.taskName+'-' + t.formattedCreatedTime} </Link></li>\n                })}\n                \n            </ul>\n        </div> );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) =>  {\n    return {\n        loadTasks : (tasks) => dispatch({type:'LOAD_TASKS', alltasks:tasks})\n    }\n}\n\nconst mapStateToProps = (state) => {\n    \n    return {alltasks:state.alltasks};\n}\n \nexport default connect(mapStateToProps, mapDispatchToProps) (UsersPage);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Cell from \"./Cell\";\nimport TaskForm from \"./TaskForm\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport UserDetailPage from \"./pages/UserDetailPage\";\nimport { connect, Provider } from 'react-redux';\nimport { Reducer, createStore } from 'redux';\nimport taskReducer from './reducer/reducer';\nimport UsersPage from \"./pages/UsersPage\";\n\n\nconst TaskPage = (props) => {\n    return <App id=\"test1\" title=\"just a test\" />\n}\n\nconst UserPage = (props) => {\n    return    <TaskForm />\n}\n\nconst SettingPage = (props) => {\n    return <div>\n    <div>\n      <Cell /><Cell /><Cell />\n    </div>\n    <div>\n      <Cell /><Cell /><Cell />\n    </div>\n    <div>\n      <Cell /><Cell /><Cell />\n    </div>\n  </div>\n}\n\n\nconst MenuLink = ({ label, to, iconname, badge}) => (\n    <Route\n      path={to}\n      children={({ match }) => (\n        <li className={match ? \"active\" : \"\"}><Link to={to}><i className=\"material-icons left\">{iconname}</i> {label}\n        {badge ? <span className=\"new badge red\">{badge}</span> : \"\"}</Link></li>\n      )}\n    />\n  );\n\nconst store = createStore(taskReducer);\n\nReactDOM.render(\n    <Provider store={store}> \n  <Router basename='/batch-approval'>\n    \n      <div>\n        <nav> \n            <div className=\"nav-wrapper teal lighten-2\">\n              <a href=\"#\" className=\"brand-logo\" style={{paddingLeft:'20px'}}><i className=\"material-icons\">cloud</i>Batch Approval</a>\n              <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n                <MenuLink label='Tasks' to=\"/tasks\" iconname='collections' badge='5'/>\n                <MenuLink label='Users' to=\"/users\" iconname='people'/>\n                <MenuLink label='My Acct' to=\"/settings\" iconname='settings'/>\n              </ul>\n            </div>\n          </nav>\n\n        <Route path=\"/tasks\"  component={TaskPage} />\n        <Route path=\"/users\" exact={true}  component={UsersPage} />\n        <Route path=\"/users/:id\" component={UserDetailPage} />\n        <Route path=\"/settings\" component={SettingPage} />\n      </div>\n  </Router>\n  </Provider>\n  ,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}